to run, use command 'python findPaths.py

uses python 2.7

ASSUMPTIONS:

Kiosks exist in a cartesian plane (i.e. curvature of earth is ignored)
cost between two kiosks is as the crow flies

DESIGN DECISIONS:

This problem is essentially a traveling salesperson problem with two salespeople.

I reduced it back to a regular traveling salesperson problem by adding the starting point as another
node in the list of kiosks to visit and then splitting the path in two based on the position of the 
starting point in the path generated by the solution.

Since the algorithm to find the actual shortest path is O(n!), a set of 51 kiosks is too large to 
compute the shortest path in a reasonable amount of time. So I decided to approximate the shortest path.

To approximate the shortest path, I utilized the 2-OPT algorithm which swaps edges in a starting path
until there is no improvement made to the path.

To create the starting path, I shuffled the list of kiosks to create a random starting path for 2-OPT to
work on. 

I repeated the 2-OPT algorithm 25 times to help eliminate some of the noise from the randomness created
by shuffling the list of kiosks.

I prioritised the total length of the path, which occassionally produces a result that when the route is split
into the two routes, one of the routes is empty.